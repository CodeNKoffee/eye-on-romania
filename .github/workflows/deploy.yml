name: Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main
  
  # Manual deployment trigger
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    environment:
      name: production
      url: https://eye-on-romania.com
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    # SSH Deployment Option
    - name: Install SSH key
      if: env.DEPLOY_METHOD == 'ssh'
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add SSH key to known hosts
      if: env.DEPLOY_METHOD == 'ssh'
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
        
    - name: Deploy via SSH
      if: env.DEPLOY_METHOD == 'ssh'
      env:
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_IP: ${{ secrets.SERVER_IP }}
        APP_PATH: ${{ secrets.APP_PATH || '/var/www/eye-on-romania' }}
      run: |
        # Create deployment archive
        tar -czf deployment.tar.gz .next/ package.json package-lock.json public/ src/ next.config.ts tsconfig.json tailwind.config.cjs postcss.config.mjs
        
        # Upload and deploy
        scp deployment.tar.gz $SERVER_USER@$SERVER_IP:~/
        ssh $SERVER_USER@$SERVER_IP << 'EOF'
          cd ${{ env.APP_PATH }}
          
          # Backup current deployment
          if [ -d ".next" ]; then
            mv .next .next.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Extract new deployment
          tar -xzf ~/deployment.tar.gz
          
          # Install dependencies and restart
          npm ci --only=production
          
          # Restart application with PM2
          if command -v pm2 &> /dev/null; then
            pm2 restart eye-on-romania || pm2 start npm --name "eye-on-romania" -- start
          else
            echo "PM2 not found, please restart the application manually"
          fi
          
          # Cleanup
          rm ~/deployment.tar.gz
          
          echo "✅ Deployment completed successfully"
        EOF
      
    # Vercel Deployment Option (Alternative)
    - name: Deploy to Vercel
      if: env.DEPLOY_METHOD == 'vercel'
      run: |
        npx vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        
    # Netlify Deployment Option (Alternative)
    - name: Deploy to Netlify
      if: env.DEPLOY_METHOD == 'netlify'
      run: |
        npx netlify-cli deploy --prod --dir=.next --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Deployment Success Notification
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here (Slack, Discord, email, etc.)
        # Example for Slack webhook:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"✅ Eye on Romania deployed successfully to production!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Deployment Failed Notification
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification logic here
        # Example for Slack webhook:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"❌ Eye on Romania deployment failed! Check GitHub Actions for details."}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    
    steps:
    - name: Wait for deployment
      run: sleep 30
      
    - name: Health check
      run: |
        # Check if the application is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" https://eye-on-romania.com/ || echo "000")
        if [ "$response" = "200" ]; then
          echo "✅ Health check passed - Application is responding"
        else
          echo "❌ Health check failed - Application returned HTTP $response"
          exit 1
        fi
